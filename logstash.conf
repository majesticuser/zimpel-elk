input {
  file {
    path => "/Users/virginio/projects/zimpel-elk/logs/*.log-*"
    start_position => beginning
    sincedb_path => "/Users/virginio/projects/zimpel-elk/sincedb36"
    debug => true
  }
}

filter {
  if ([path] =~ "application.log-*" and [message] =~ "Started") {
    grok {
      patterns_dir => "./logstash_grok_patterns"
      match => { "message" => "%{RAILS}" }
    }
    date {
      # see http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html
      # 2014-11-22 23:59:10
      match => ["log_ts", "yyyy-MM-dd HH:mm"]
    }
  }
  else if ([path] =~ "mailer.log-*" and [message] =~ "Sent mail to") {
    grok {
      match => { "message" => "Sent mail to %{NOTSPACE:email} \(%{NUMBER:send_duration_ms}ms\)" }
    }
  }
  else if ([path] =~ "solr.log-*") {
    grok {
      match => [ 
        "message", "(?<log_ts>%{YEAR:log_ts_year}-%{MONTHNUM:log_ts_month}-%{MONTHDAY:log_ts_day} %{HOUR:log_ts_hour}:%{MINUTE:log_ts_minute})"
      ]
    }
    date {
      # see http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html
      # 2014-11-22 23:59:10
      match => ["log_ts", "yyyy-MM-dd HH:mm"]
    }

    # -------------------------
    # Job search initial search
    # -------------------------

    # Initial: job subjects
    grok {
      match => [ 
        # (q=|\+AND\+) to exclude the fq and facet.query
        "message", "(q=|\+AND\+)job_search_job_subject_ids:\(%{DATA:q_job_search_job_subject_ids}\)"
      ]
    }
    # Initial: mediumtype
    grok {
      match => [ 
        # (q=|\+AND\+) to exclude the fq and facet.query
        "message", "(q=|\+AND\+)job_search_medium_mediumtype_id:\(%{DATA:q_job_search_medium_mediumtype_id}\)"
      ]
    }
    # Initial: geopath
    grok {
      match => [ 
        "message", "job_search_medium_geopath_ids:\(%{DATA:q_job_search_medium_geopath_ids}\)"
      ]
    }
    # Initial: zipcode
    grok {
      match => [
        "message", "job_search_location\+pt\%3D(?<job_search_location>%{DATA:q_job_search_location_lat},%{DATA:q_job_search_location_lng})\+d\%3D"
      ]
    }

    # -------------------
    # Job search faceting
    # -------------------

    # Facet: job subjects
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_job_subject_ids'}job_search_job_subject_ids:\(%{DATA:fq_job_search_job_subject_ids}\)"
      ]
    }
    # Facet: primary job subjects
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_job_primary_subject_ids'}job_search_job_primary_subject_ids:\(%{DATA:fq_job_search_job_primary_subject_ids}\)"
      ]
    }
    # Facet: medium subjects
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_medium_subject_ids'}job_search_medium_subject_ids:\(%{DATA:fq_job_search_medium_subject_ids}\)"
      ]
    }
    # Facet: medium
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_medium_id'}job_search_medium_id:\(%{DATA:fq_job_search_medium_id}\)"
      ]
    }
    # Facet: mediumtype
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_medium_mediumtype_id'}job_search_medium_mediumtype_id:\(%{DATA:fq_job_search_medium_mediumtype_id}\)"
      ]
    }
    # Facet: frequency
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_medium_frequency_id'}job_search_medium_frequency_id:\(%{DATA:fq_job_search_medium_frequency_id}\)"
      ]
    }
    # Facet: reach
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_medium_reach_id'}job_search_medium_reach_id:\(%{DATA:fq_job_search_medium_reach_id}\)"
      ]
    }
    # Facet: adrate
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_medium_adrate_range_id'}job_search_medium_adrate_range_id:\(%{DATA:fq_job_search_medium_adrate_range_id}\)"
      ]
    }
    # Facet: country
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_medium_country_ids'}job_search_medium_country_ids:\(%{DATA:fq_job_search_medium_country_ids}\)"
      ]
    }
    # Facet: node_1
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_medium_node_1_ids'}job_search_medium_node_1_ids:\(%{DATA:fq_job_search_medium_node_1_ids}\)"
      ]
    }
    # Facet: city
    grok {
      match => [ 
        "message", "{!tag%3D'fq_job_search_medium_city_ids'}job_search_medium_city_ids:\(%{DATA:fq_job_search_medium_city_ids}\)"
      ]
    }
    # Facet: language
    grok {
      match => [
        "message", "{!tag%3D'fq_job_search_contact_language_id'}job_search_contact_language_id:\(%{DATA:fq_job_search_contact_language_id}\)"
      ]
    }

    # -------------------
    # Job search grouping
    # -------------------
    grok {
      match => [
        "message", "group.field=job_search_%{DATA:job_search_grouped_by}_groupable"
      ]
    }

    # -------------------
    # Job search fulltext
    # -------------------

    grok {
      match => [ 
        "message", "job_search_fulltext_de:\(%{DATA:job_search_fulltext_de}\)"
      ]
    }
    grok {
      match => [ 
        "message", "job_search_fulltext_en:\(%{DATA:job_search_fulltext_en}\)"
      ]
    }

  }
  else {
    drop{}
  }
}

output {
  stdout {
    codec => rubydebug
  }
  elasticsearch {
    # Setting 'embedded' will run  a real elasticsearch server inside logstash.
    # This option below saves you from having to run a separate process just
    # for ElasticSearch, so you can get started quicker!
    # embedded => true
    protocol => http
    index => 'logstash_zimpel'
  }
}
